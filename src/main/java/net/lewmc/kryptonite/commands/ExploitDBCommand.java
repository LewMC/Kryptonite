package net.lewmc.kryptonite.commands;

import net.lewmc.kryptonite.Kryptonite;
import net.lewmc.kryptonite.exploitdatabase.Check;
import net.lewmc.kryptonite.exploitdatabase.Patch;
import net.lewmc.kryptonite.utils.MessageUtil;
import net.lewmc.kryptonite.utils.PermissionUtil;
import net.lewmc.kryptonite.utils.SoftwareUtil;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;

import java.util.Objects;

public class ExploitDBCommand implements CommandExecutor {
    private final Kryptonite plugin;
    private MessageUtil message;

    /**
     * Constructor for the Optimise class.
     * @param plugin References to the main plugin class.
     */
    public ExploitDBCommand(Kryptonite plugin) {
        this.plugin = plugin;
    }

    /**
     * /kryptonite command handler.
     * @param commandSender Information about who sent the command - player or console.
     * @param command Information about what command was sent.
     * @param s Command label - not used here.
     * @param args The command's arguments.
     * @return boolean true/false - was the command accepted and processed or not?
     */
    @Override
    public boolean onCommand(CommandSender commandSender, Command command, String s, String[] args) {
        this.message = new MessageUtil(commandSender);
        PermissionUtil perm = new PermissionUtil();

        if (perm.isOperator(commandSender)) {
            if (args.length >= 1) {
                Check check = new Check(plugin);
                if (Objects.equals(args[0].toLowerCase(), "check")) {
                    this.checkAll(check);
                } else if (Objects.equals(args[0].toLowerCase(), "patch")) {
                    if (args.length >= 2) {
                        Patch patch = new Patch(this.plugin);
                        switch (args[1].toLowerCase()) {
                            case "all":
                                message.Info("Patching all...");
                                if (patch.all()) {
                                    message.Success("Patched all exploits!");
                                } else {
                                    message.Error("Unable to patch all exploits.");
                                    checkAll(check);
                                }
                                message.Warning("EDB-10 needs to be patched manually.");
                                message.Warning("To patch use '/ebd patch EBD-10'");
                                break;
                            case "edb-1":
                                if (patch.edb1()) {
                                    message.Success("Exploit EDB-1 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-1.");
                                }
                                break;
                            case "edb-2":
                                if (patch.edb2()) {
                                    message.Success("Exploit EDB-2 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-2.");
                                }
                                break;
                            case "edb-3":
                                if (patch.edb3()) {
                                    message.Success("Exploit EDB-3 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-3.");
                                }
                                break;
                            case "edb-4":
                                if (patch.edb4()) {
                                    message.Success("Exploit EDB-4 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-4.");
                                }
                                break;
                            case "edb-5":
                                if (patch.edb5()) {
                                    message.Success("Exploit EDB-5 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-5.");
                                }
                                break;
                            case "edb-6":
                                if (patch.edb6()) {
                                    message.Success("Exploit EDB-6 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-6.");
                                }
                                break;
                            case "edb-7":
                                if (patch.edb7()) {
                                    message.Success("Exploit EDB-7 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-7.");
                                }
                                break;
                            case "edb-8":
                                if (patch.edb8()) {
                                    message.Success("Exploit EDB-8 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-8.");
                                }
                                break;
                            case "edb-9":
                                if (patch.edb9()) {
                                    message.Success("Exploit EDB-9 patched!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-9.");
                                }
                                break;
                            case "edb-10":
                                message.Warning("EBD-10 has two possible fixes. Please select one.'");
                                message.Info("Fix A: Disable treasure maps.");
                                message.Info("Fix B: Check maps are valid.");
                                message.Error("Only use Fix B if you have pregenerated your world and applied a vanilla world border!");
                                message.Info("Usage: '/edb patch EBA-10-A' OR '/edb patch EBA-10-B'");
                                break;
                            case "edb-10-a":
                                if (patch.edb10a()) {
                                    message.Success("Exploit EDB-10 patched using Fix A!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-10 using Fix A.");
                                }
                                break;
                            case "edb-10-b":
                                if (patch.edb10b()) {
                                    message.Success("Exploit EDB-10 patched using Fix B!");
                                } else {
                                    message.Error("Unable to patch exploit EDB-10 using Fix B.");
                                }
                                break;
                            default:
                                message.Warning("Unknown Patch ID.");
                                message.Error("Usage: '/edb patch <id>' OR '/edb patch all'");
                                break;
                        }
                    } else {
                        message.Error("Usage: '/edb patch <id>' OR '/edb patch all'");
                    }
                } else {
                    message.Error("Unknown command. Use '/edb' for help.");
                }
            } else {
                message.Info("ExploitDB");
                message.Info("");
                message.Info("/edb check - Check your server.");
                message.Info("/edb patch - Patch your server.");
            }
        } else {
            message.Error("You do not have the required permissions to run this command.");
            message.Error("Please visit https://wiki.lewmc.net/index.php/Kryptonite_Commands for more information.");
        }
        return true;
    }

    private void checkAll(Check check) {
        this.complete(check.edb1(), "EDB-1");
        this.complete(check.edb2(), "EDB-2");
        this.complete(check.edb3(), "EDB-3");
        this.complete(check.edb4(), "EDB-4");
        this.complete(check.edb5(), "EDB-5");
        this.complete(check.edb6(), "EDB-6");
        this.complete(check.edb7(), "EDB-7");
        this.complete(check.edb8(), "EDB-8");
        this.complete(check.edb9(), "EDB-9");
        this.complete((check.edb10a() || check.edb10b()), "EDB-10");

        SoftwareUtil software = new SoftwareUtil(plugin);
        if (!software.isPaper()) {
            message.Warning("Many of these exploits require Paper to be patched, which you are not running.");
        }

        message.Info("More information: https://wiki.lewmc.net/index.php/Exploit_Database");
    }

    private void complete(boolean passed, String code) {
        if (passed) {
            this.message.Success(code + " - Passed");
        } else {
            this.message.Error(code + " - Failed");
        }
    }
}
