package net.lewmc.kryptonite.exploitdatabase;

import net.lewmc.kryptonite.Kryptonite;
import net.lewmc.kryptonite.utils.SoftwareUtil;
import org.bukkit.configuration.InvalidConfigurationException;

import java.io.File;
import java.io.IOException;

public class Check {
    private final Kryptonite plugin;
    private final SoftwareUtil softwareUtil;

    public Check(Kryptonite plugin) {
        this.plugin = plugin;
        this.softwareUtil = new SoftwareUtil(plugin);
    }

    public boolean edb1() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-world-defaults.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("entities.armor-stands.do-collision-entity-lookups") == "true") {
                return false;
            } else if (this.plugin.getConfig().get("entities.armor-stands.tick") == "true") {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    public boolean edb2() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-global.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("item-validation.book-size.page-max") != "1024") {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }

    public boolean edb3() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-world-defaults.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("collisions.max-entity-collisions") != "2") {
                return false;
            }

            if (this.plugin.getConfig().get("collisions.fix-climbing-bypassing-cramming-rule") != "true") {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }

    public boolean edb4() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-global.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundCommandSuggestionPacket.action") != "DROP") {
                return false;
            }
            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundCommandSuggestionPacket.interval") != "1.0") {
                return false;
            }
            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundCommandSuggestionPacket.max-packet-rate") != "15.0") {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }

    public boolean edb5() {
        if (this.softwareUtil.isSpigot()) {
            try {
                this.plugin.getConfig().load(new File("spigot.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("commands.spam-exclusions") != null) {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    public boolean edb6() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-global.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("misc.max-joins-per-tick") != "3") {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    public boolean edb7() {
        // TODO: IMPLEMENT
        return false;
    }

    public boolean edb8() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-world-defaults.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.arrow") != "8") {
                return false;
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.ender_pearl") != "8") {
                return false;
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.experience_orb") != "8") {
                return false;
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.fireball") != "8") {
                return false;
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.small_fireball") != "8") {
                return false;
            }

            if (this.plugin.getConfig().get("chunks.entity-per-chunk-save-limit.snowball") != "8") {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    public boolean edb9() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-global.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundPlaceRecipePacket.action") != "DROP") {
                return false;
            }

            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundPlaceRecipePacket.interval") != "4.0") {
                return false;
            }

            if (this.plugin.getConfig().get("packet-limiter.overrides.ServerboundPlaceRecipePacket.max-packet-rate") != "5.0") {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    public boolean edb10a() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-world-defaults.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("environment.treasure-maps.enabled") != "false") {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    public boolean edb10b() {
        if (this.softwareUtil.isPaper()) {
            try {
                this.plugin.getConfig().load(new File("config/paper-world-defaults.yml"));
            } catch (IOException | InvalidConfigurationException e) {
                throw new RuntimeException(e);
            }

            if (this.plugin.getConfig().get("environment.treasure-maps.find-already-discovered.loot-tables") != "true") {
                return false;
            }

            if (this.plugin.getConfig().get("environment.treasure-maps.find-already-discovered.villager-trade") != "true") {
                return false;
            }

            return true;
        } else {
            return false;
        }
    }
}
